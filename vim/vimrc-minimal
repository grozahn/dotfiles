" Terminal toggle
if has('nvim')
	let g:term_buf = 0
	let g:term_win = 0
	
	function! TerminalToggle(height)
		if win_gotoid(g:term_win)
			hide
		else
			botright new
			exec "resize " . a:height
			try
				exec "buffer " . g:term_buf
			catch
				call termopen($SHELL, {"detach": 0})
				let g:term_buf = bufnr("")
			endtry
			startinsert!
			let g:term_win = win_getid()
		endif
	endfunction
	
	nnoremap <F4> :call TerminalToggle(10)<cr>
	tnoremap <F4> <C-\><C-n>:call TerminalToggle(10)<cr>
endif

" Netrw toggle
let g:netrw_win = 0
let g:netrw_hide = 1
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+,\(^\|\s\s\)ntuser\.\S\+'

function! NetrwToggle()
	if win_gotoid(g:netrw_win)
		:q
		let g:netrw_win = 0
	else
		:Lexplore 20
		let g:netrw_win = win_getid()
	endif
endfunction

nnoremap <F3> :call NetrwToggle()<CR>

" Autocompletion
function! SuperTab()
	let l:part = strpart(getline('.'),col('.')-2,1)
	if (l:part=~'^\W\?$')
		return "\<Tab>"
	else
		return "\<C-n>"
	endif
endfunction

inoremap <Tab> <C-R>=SuperTab()<CR>

" Common settings
set nocompatible
set noswapfile
filetype off
filetype plugin on
filetype plugin indent on

" Encoding
set encoding=utf-8
set termencoding=utf-8

" Tabs
nnoremap <C-a> :tabprevious<CR>
nnoremap <C-d> :tabNext<CR>
nnoremap <C-s> :tabnew<CR>
nnoremap <C-q> :tabclose<CR>

" Tab key
set tabstop=4
set softtabstop=4
set shiftwidth=4
set noexpandtab

" Navigation
set cursorline
set mouse=a
set number

" Style
syntax enable
colorscheme elflord 
set background=dark
